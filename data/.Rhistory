theme_classic()
chn_dataset <- read.csv("/Users/mariedelvalle/Documents/projects/brain_lateralization_study/CHNDataset.csv")
View(chn_dataset)
View(chn_dataset)
chn_dataset <- read.csv("/Users/mariedelvalle/Documents/projects/brain_lateralization_study/CHNDataset.csv")
dataset <- read.csv("/Users/mariedelvalle/Documents/projects/brain_lateralization_study/CHNDataset.csv")
# Ver los primeros valores únicos
print(unique(dataset$sigma))
# Histograma
hist(dataset$sigma, breaks = "Sturges", col = "lightblue", main = "Distribución de Variable")
# Medidas básicas de tendencia central y dispersión
summary(dataset$sigma)
qqnorm(dataset$sigma)
qqline(dataset$sigma, col = "red")
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad")
curve(dnorm(x, mean = mean(dataset$sigma), sd = sd(dataset$sigma)), add = TRUE, col = "red")
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad", breaks = 20)
View(dataset)
View(dataset)
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad", breaks = 20)
curve(dnorm(x, mean = mean(dataset$sigma), sd = sd(dataset$sigma)), add = TRUE, col = "red")
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad", breaks = 200)
View(dataset)
View(chn_dataset)
dataset <- read.csv("/Users/mariedelvalle/Documents/projects/brain_lateralization_study/CHNDataset.csv")
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad", breaks = 200)
curve(dnorm(x, mean = mean(dataset$sigma), sd = sd(dataset$sigma)), add = TRUE, col = "red")
# Histograma
hist(dataset$sigma, breaks = "Sturges", col = "lightblue", main = "Distribución de Variable")
curve(dnorm(x, mean = mean(dataset$sigma), sd = sd(dataset$sigma)), add = TRUE, col = "red")
qqnorm(dataset$sigma)
qqline(dataset$sigma, col = "red")
hist(dataset$sigma, freq = FALSE, main = "Histograma con Curva de Densidad", breaks = 200)
shapiro.test(dataset$sigma)
ks.test(dataset$sigma, "pnorm", mean(datos), sd(datos))
ks.test(dataset$sigma, "pnorm", mean(dataset$sigma), sd(dataset$sigma))
total_na <- sum(is.na(dataset))
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset <- read.csv("/Users/mariedelvalle/Documents/projects/brain_lateralization_study/CHNDataset.csv")
install.packages('fresurfer')
install.packages('freesurfer')
install.packages('ggseg')
install.packages("freesurferformats")
library(freesurferformats)
d <- read.fs.surface('/Users/mariedelvalle/Desktop/freesurfer/sub-01/surf/lh.pial')
View(d)
View(d)
d <- read.fs.surface('/Users/mariedelvalle/Desktop/freesurfer/sub-02/surf/lh.pial')
d <- read.fs.surface('/Users/mariedelvalle/Desktop/freesurfer/sub-02/surf/lh.pial')
View(d)
View(d)
d <- read.fs.surface('/Volumes/Elements/NYUDataset/derivatives/freesurfer/sub-wlsubj001/surf/lh.pial')
View(d)
View(d)
d <- read.fs.surface('/Volumes/Elements/NYUDataset/derivatives/freesurfer/sub-wlsubj004/surf/lh.pial')
View(d)
install.packages("gridExtra")
library(gridExtra)
# Crea algunas gráficas de ejemplo
plot1 <- plot(rnorm(100), main = "Gráfica 1")
plot2 <- plot(runif(100), main = "Gráfica 2")
plot3 <- plot(rpois(100, lambda = 2), main = "Gráfica 3")
plot4 <- plot(rexp(100), main = "Gráfica 4")
# Combina las gráficas en una matriz de 2x2
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
print(grid.arrange(plot1, plot2, plot3, plot4, ncol = 2))
game <- data.frame(scores <- c(34, 54, 21, 67, 98),
players <- c("A", "B", "C", "D", "E"),
avg_score <- c(56, 43, 65, 23, 16))
# display plot on screen
windows()
install.packages("palmerpenguins")
library(palmerpenguins)
# combined plot with 2 rows and 1 column
par(mfrows = c(2,1))
# first single plot
plot(penguins$body_mass_g,
penguins$flipper_length_mm,
main = "ScatterPlot",
xlab = "body_mass",
ylab = "flipper_length")
# second single plot
plot(penguins$bill_depth_mm,
penguins$bill_length_mm,
main = "ScatterPlot",
xlab = "bill_depth",
ylab = "bill_length")
#create data
math_marks <- c(90, 95, 85, 76, 65)
science_marks <- c(45, 98, 54, 87, 65)
student_names <- c("A", "B", "C", "D", "E")
# combine plots with 1 row and 2 columns
par(mfcol = c(1,2))
# first pie chart
pie(math_marks, student_names,
main = "PieChart", radius = 0.75)
# second pie chart
pie(science_marks, student_names,
main = "Piechart", radius = 0.75)
game <- data.frame(scores <- c(34, 54, 21, 67, 98),
players <- c("A", "B", "C", "D", "E"),
avg_score <- c(56, 43, 65, 23, 16))
# display plot on screen
windows()
install.packages("ggpubr")
# ToothGrowth
data("ToothGrowth")
head(ToothGrowth)
data("mtcars")
mtcars$name <- rownames(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
head(mtcars[, c("name", "wt", "mpg", "cyl")])
# Box plot (bp)
bxp <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")
library(ggpubr)
# Box plot (bp)
bxp <- ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")
bxp
# Dot plot (dp)
dp <- ggdotplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco", binwidth = 1)
dp
# Bar plot (bp)
bp <- ggbarplot(mtcars, x = "name", y = "mpg",
fill = "cyl",               # change fill color by cyl
color = "white",            # Set bar border colors to white
palette = "jco",            # jco journal color palett. see ?ggpar
sort.val = "asc",           # Sort the value in ascending order
sort.by.groups = TRUE,      # Sort inside each group
x.text.angle = 90           # Rotate vertically x axis texts
)
bp + font("x.text", size = 8)
# Scatter plots (sp)
sp <- ggscatter(mtcars, x = "wt", y = "mpg",
add = "reg.line",               # Add regression line
conf.int = TRUE,                # Add confidence interval
color = "cyl", palette = "jco", # Color by groups "cyl"
shape = "cyl"                   # Change point shape by groups "cyl"
)+
stat_cor(aes(color = cyl), label.x = 3)       # Add correlation coefficient
sp
ggarrange(bxp, dp, bp + rremove("x.text"),
labels = c("A", "B", "C"),
ncol = 2, nrow = 2)
install.packages("RNifti")
install.packages("lme4")
library(lme4)
path <- "/Users/mariedelvalle/Documents/projects/brain_lateralization_study/tables/HCP_prfresults.csv"
table <- read.csv(path)
library(oro.nifti)
install.packages("oro.nifti")
library(oro.nifti)
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
# Ver la estructura de la imagen
str(imagen_nii)
imagen_nii <- readNIfTI(path)
imagen_nii <- gzfile(path, "rb")
# Ver la estructura de la imagen
str(imagen_nii)
# Acceder a los datos de la imagen
image_data <- imagen_nii$img
library(oro.nifti)
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
# Abrir el archivo comprimido
archivo_comprimido <- gzfile(path, "rb")
# Leer el archivo descomprimido
imagen_nii <- readNIfTI(archivo_comprimido)
# Abrir el archivo comprimido
archivo_comprimido <- gzfile(path, "rb")
# Cerrar el archivo
close(archivo_comprimido)
# Ver la estructura de la imagen
str(imagen_nii)
# Acceder a los datos de la imagen
datos_imagen <- archivo_comprimido$img
View(table)
install.packages("remotes")
remotes::install_github("jonclayden/RNifti")
install.packages('neurobase')
library(oro.nifti)
library(neurobase)
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
t1 = readnii(path)
t1
# Extraer propiedades de la imagen
propiedades <- data.frame(
Dim = dim(t1),  # Dimensiones de la imagen
DataType = typeof(t1),  # Tipo de datos de la imagen
PixDim = t1$pixdim,  # Tamaños de los píxeles en cada dimensión
QFac = t1$qfac,  # Factor de orientación
SclSlope = t1$scl_slope,  # Pendiente de la escala de los datos
SclIntercept = t1$scl_inter,  # Intersección de la escala de los datos
DimInfo = t1$diminfo,  # Información de dimensión
Extension = t1$extender  # Extensión
)
propiedades <- data.frame(
Dim = dim(t1),  # Dimensiones de la imagen
DataType = typeof(t1),  # Tipo de datos de la imagen
PixDim = t1[["pixdim"]],  # Tamaños de los píxeles en cada dimensión
QFac = t1[["qfac"]],  # Factor de orientación
SclSlope = t1[["scl_slope"]],  # Pendiente de la escala de los datos
SclIntercept = t1[["scl_inter"]],  # Intersección de la escala de los datos
DimInfo = t1[["diminfo"]],  # Información de dimensión
Extension = t1[["extender"]]  # Extensión
)
cat("Installing various dependencies\n")
install.packages(
c("codetools", "foreach", "doMC", "multicore", "getopt", "optparse",
"bigmemory", "biganalytics", "bigmemory.sri")
, repos="http://cran.us.r-project.org")
install.packages(
c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"),
dependencies=TRUE
, repos="http://cran.us.r-project.org")
## Install BigAlgebra (old version)
cat("\nInstalling bigalgebra\n")
devtools::install_github("bigalgebra", "czarrar")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
devtools::install_github("bigextensions", "czarrar")
install.packages(
c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"),
dependencies=TRUE
, repos="http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
## Install BigAlgebra (old version)
cat("\nInstalling bigalgebra\n")
devtools::install_github("bigalgebra", "czarrar")
cat("Installing various dependencies\n")
install.packages(
c("codetools", "foreach", "doMC", "multicore", "getopt", "optparse",
"bigmemory", "biganalytics", "bigmemory.sri")
, repos="http://cran.us.r-project.org")
install.packages(
c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"),
dependencies=TRUE
, repos="http://cran.us.r-project.org")
## Install BigAlgebra (old version)
cat("\nInstalling bigalgebra\n")
devtools::install_github("bigalgebra", "czarrar")
install.packages(c("plyr", "Rcpp", "RcppArmadillo", "inline", "devtools"), dependencies = TRUE, repos = "http://cran.us.r-project.org")
# Loading data
path_to_file <- '/Volumes/m/rest/NIfTI/rest.nii.gz'
hdr <- read.nifti.header(path_to_file) # this file is only needed when writing the output
img <- read.nifti.image(path_to_file) # should be a 3D or 4D array
library(niftir)
remotes::install_github("jonclayden/RNifti")
remotes::install_github("jonclayden/RNifti")
library(oro.nifti)
# Loading data
path_to_file <- '/Volumes/m/rest/NIfTI/rest.nii.gz'
hdr <- read.nifti.header(path_to_file) # this file is only needed when writing the output
install.packages("remotes")
# Load the 'remotes' library
library(remotes)
# Install RNifti from GitHub
remotes::install_github("jonclayden/RNifti")
library(oro.nifti)
library(neurobase)
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
t1 = readnii(path)
t1
pixdim(t1)
dim(t1)
pixunits(t1)
# Extraer propiedades de la imagen
propiedades <- data.frame(
Dim = dim(t1),  # Dimensiones de la imagen
DataType = typeof(t1),  # Tipo de datos de la imagen
PixDim = pixdim(t1)  # Tamaños de los píxeles en cada dimensión
)
# Mostrar las propiedades
print(propiedades)
# Guardar las propiedades en una tabla
write.csv(propiedades, file = "propiedades_imagen.csv", row.names = FALSE)
View(propiedades)
# Extraer propiedades de la imagen
propiedades <- data.frame(
Dim = list(dim(t1)),  # Dimensiones de la imagen
PixDim = list(pixdim(t1))  # Tamaños de los píxeles en cada dimensión
)
# Mostrar las propiedades
print(propiedades)
# Guardar las propiedades en una tabla
write.csv(propiedades, file = "propiedades_imagen.csv", row.names = FALSE)
# Extraer propiedades de la imagen
propiedades <- data.frame(
Dim = dim(t1),  # Dimensiones de la imagen
PixDim = pixdim(t1)  # Tamaños de los píxeles en cada dimensión
)
propiedades <- data.frame(
Dim = paste(dim(t1), collapse = "x"),  # Dimensiones de la imagen
PixDim = paste(pixdim(t1), collapse = "x")  # Tamaños de los píxeles en cada dimensión
)
# Mostrar las propiedades
print(propiedades)
pixdim(t1)
t1
paste(pixdim(t1), collapse = "x")
paste(pixdim(t1))
pixdim(t1)
pixdim(t1)
s
# Guardar las propiedades en una tabla
write.csv(t1, file = "propiedades_imagen.csv", row.names = FALSE)
# Guardar las propiedades en una tabla
write.csv(t1, file = "propiedades_imagen.csv", row.names = FALSE)
install.packages("remotes")
library(remotes)
# Install RNifti from GitHub
remotes::install_github("jonclayden/RNifti")
library(RNifti)
image <- readNifti(system.file("extdata", path, package="RNifti"))
library(RNifti)
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
image <- readNifti(system.file("extdata", path, package="RNifti"))
path <-'/Volumes/m/rest/NIfTI/rest.nii.gz'
image <- readNifti(path)
propiedades <- data.frame(
Dim = paste(dim(image), collapse = "x"),  # Dimensiones de la imagen
PixDim = paste(pixdim(image), collapse = "x")  # Tamaños de los píxeles en cada dimensión
)
# Mostrar las propiedades
print(propiedades)
source("~/Desktop/raul/read_datasets.R")
library(RNifti)
directory <-'/Volumes/My Book/DATA_fromMNI/abide_i'
files <- list.files(directory,full.names = TRUE, recursive = FALSE)
name <- list()
dimension <- list()
pixel_dimension <- list()
for (file in files) {
cat("Explorando la carpeta:", file, "\n")
subfiles <- list.dirs(file, full.names = TRUE, recursive = FALSE, pattern = "^rest")
for (subfile in subfiles){
path <-paste0(subfile,'/NIfTI/rest.nii.gz')
image <- readNifti(path)
name <-c(name, file)
dimension <- c(dimension, paste(dim(image), collapse = "x"))
pixel_dimension <- c(pixel_dimension, paste(pixdim(image), collapse = "x"))
}
}
b
library(RNifti)
directory <-'/Volumes/My Book/DATA_fromMNI/abide_i'
files <- list.files(directory,full.names = TRUE, recursive = FALSE)
name <- list()
dimension <- list()
file in files
file <- files[0]
file
file <- files[1]
file
cat("Explorando la carpeta:", file, "\n")
subfiles <- list.dirs(file, full.names = TRUE, recursive = FALSE)
subfiles
subfiles <- subfiles[grep("^rest", subfiles)]
subfiles
subfiles <- subfiles[grep(".*/rest", subfiles)]
subfiles <- list.dirs(file, full.names = TRUE, recursive = FALSE)
subfiles <- subfiles[grep(".*/rest", subfiles)]
subfiles
subfile <- subfiles[1]
path <-paste0(subfile,'/NIfTI/rest.nii.gz')
image <- readNifti(path)
name <-c(name, subfile)
dimension <- c(dimension, paste(dim(image), collapse = "x"))
pixel_dimension <- c(pixel_dimension, paste(pixdim(image), collapse = "x"))
source("~/Desktop/raul/read_datasets.R")
# Save properties as table
write.csv(properties, file = "/Users/mariedelvalle/Desktop/raul/propiedades_imagen_abide_i.csv", row.names = FALSE)
source("~/Desktop/raul/read_datasets.R")
source("~/Desktop/raul/read_datasets.R")
properties <- data.frame(
File = unlist(name), # File name
Dim = unlist(dimension),  # Image dimensions
PixDim = unlist(pixel_dimension)) # Voxels dimensions
# Print dataframe
print(properties)
# Save properties as table
write.csv(properties, file = "/Users/mariedelvalle/Desktop/raul/propiedades_imagen_abide_ii.csv", row.names = FALSE)
install.packages("ISLP")
rm(list=ls())
setwd("/Users/mariedelvalle/Documents/courses/data-science-course/default-prediction/data/")
train <- read.csv("datamart_morosidad_training.csv", fileEncoding="utf-8",stringsAsFactors = TRUE)
test <- read.csv("datamart_morosidad_test.csv", fileEncoding="utf-8",stringsAsFactors = TRUE)
summary(train)
# install.packages("moments")
library(moments)
descriptivoManual <- function(tablaExplicativas){
nombresVariables <- names(tablaExplicativas)
for (i in nombresVariables){
print(paste0("Variable:  ",i))
print(paste0("Tipo de variable:  ", class(tablaExplicativas[,i])))
if (class(tablaExplicativas[,i])=="factor"){
# La moda no viene predefinida. La calculamos:
valores <- unique(tablaExplicativas[,i])
moda <- valores[which.max(tabulate(match(tablaExplicativas[,i], valores)))]
print(paste0("Moda:  ", moda))
print(paste0("Nº de niveles:  ", length(valores)))
print(paste0("% de missings:  ", 100*(sum(is.na(tablaExplicativas[,i]))/length(tablaExplicativas[,i])),"%"))
} else{
print(paste0("Mínimo:  ", min(tablaExplicativas[,i], na.rm = T)))
print(paste0("Máximo:  ", max(tablaExplicativas[,i], na.rm = T)))
print(paste0("Media:  ", mean(tablaExplicativas[,i], na.rm = T)))
print(paste0("Mediana:  ", median(tablaExplicativas[,i], na.rm = T)))
print(paste0("Desviación típica:  ", sd(tablaExplicativas[,i], na.rm = T)))
print(paste0("Asimetría:  ", skewness(tablaExplicativas[,i], na.rm = T)))
print(paste0("Curtosis:  ", kurtosis(tablaExplicativas[,i], na.rm = T)))
print(paste0("% de missings:  ", 100*(sum(is.na(tablaExplicativas[,i]))/length(tablaExplicativas[,i])),"%"))
}
print("*********************************************")
}
}
descriptivoManual(train[,c('Age', 'Income', 'Exp_Inc', 'Avgexp','Ownrent', 'Selfempl','Depndt', 'Inc_per', 'Cur_add', 'Major', 'Active')])
hist(train$Income, col="purple", border = F,
main = "Histograma de income del cliente",
xlab = "Meses", ylab = "Frecuencia")
hist(train$Age, col="purple", border = F,
main = "Histograma de edad del cliente",
xlab = "Meses", ylab = "Frecuencia")
hist(train$Avgexp, col="purple", border = F,
main = "Histograma de gasto mensual del cliente",
xlab = "Meses", ylab = "Frecuencia")
hist(train$Exp_Inc, col="purple", border = F,
main = "Histograma de proporción de gasto mensual",
xlab = "Meses", ylab = "Frecuencia")
hist(train$Inc_per, col="purple", border = F,
main = "Número de dependientes",
xlab = "Meses", ylab = "Frecuencia")
boxplot(train$Income, col = "purple", main = "Boxplot de antig?edad")
matrizCorrelacion<-cor(train[,c('Age', 'Income', 'Exp_Inc', 'Avgexp','Inc_per')], method = c("pearson"))
graphics.off()
#install.packages("corrplot")
library(corrplot)
corrplot(matrizCorrelacion, method="number", type="upper",tl.cex=0.5)
train$default <- as.factor(train$default)
train$Income <- as.factor(train$Income)
#install.packages("ggplot2")
library(ggplot2)
qplot(Age, data=train, fill = default, binwidth=2)
qplot(Exp_Inc, data=train, fill = default, binwidth=2)
tablaFrecuencia<-table(train$default, train$Income)
barplot(tablaFrecuencia, col = c('springgreen1','purple'), border = F)
Age_f <- as.factor(train$Age)
tablaFrecuencia<-table(train$default, Age_f)
barplot(tablaFrecuencia, col = c('springgreen1','purple'), border = F)
graficoDependencia <- function(tablaExplicativas, default, numBinsHist){
for (i in names(tablaExplicativas)){
print(i)
if (class(tablaExplicativas[,i])=="factor"){
maintitle = paste0( i," vs default")
tablaFrecuencia<-table(default, tablaExplicativas[,i])
proporcion<-tablaFrecuencia[2,]/(tablaFrecuencia[1,]+tablaFrecuencia[2,])
# Para que aparezcan los nombres en horizontal
par(las=2)
barplot(proporcion, col = c('purple'),
border = F, main = maintitle, horiz=TRUE, cex.names=0.7)
} else {
xrange = seq(min(tablaExplicativas[is.na(i) == F,i], na.rm = T),max(tablaExplicativas[is.na(i) == F,i], na.rm = T),
(max(tablaExplicativas[is.na(i) == F,i], na.rm = T)-min(tablaExplicativas[is.na(i) == F,i], na.rm = T))/numBinsHist)
conteo_1s = hist(tablaExplicativas[default==1,i], breaks=xrange, plot=F)$counts
conteo_0s = hist(tablaExplicativas[default==0,i], breaks=xrange, plot=F)$counts
proporcion_1s<-conteo_1s/(conteo_1s+conteo_0s)
maintitle = paste0( i," vs default")
barplot(rbind(conteo_0s, conteo_1s), col = c('springgreen1','purple'),
border=F, names.arg=xrange[-1], space=1, las=1, main=maintitle)
}
}
}
graficoDependencia(train[,c('Age', 'Income', 'Exp_Inc', 'Avgexp','Ownrent', 'Selfempl','Depndt', 'Inc_per', 'Cur_add', 'Major', 'Active')], train$default, 40)
set.seed(12345)
bajomuestreo <- function(datos, variableObjetivo, proporcionUnosDeseada){
numUnos <- nrow(subset(datos, variableObjetivo==1))
numCeros <- round((numUnos/proporcionUnosDeseada)-numUnos)
tablaCeros <- subset(datos, variableObjetivo==0)
ceros <- sample(nrow(tablaCeros), numCeros, replace = FALSE)
return(rbind(datos[variableObjetivo==1,], tablaCeros[ceros,]))
}
bajomuestreo_0_5 <- bajomuestreo(train, train$default, 1/2)
table(bajomuestreo_0_5$default)
bajomuestreo_0_33 <- bajomuestreo(train, train$default, 1/3)
table(bajomuestreo_0_33$default)
tablaUnos <- subset(train, train$default==1)
tablaCeros <- subset(train, train$default==0)
replicaUnos <- sample(nrow(tablaUnos),nrow(tablaCeros),replace=TRUE)
tablaUnos <- tablaUnos[replicaUnos,]
sobremuestreo_0_5 <- rbind(tablaCeros,tablaUnos)
table(sobremuestreo_0_5$default)
percentilesEdad <- quantile(train$EDAD_CLIENTE, c(0.98, 0.99, 0.995, 1), na.rm = T)
percentilesEdad
rm(list=ls())
setwd("/Users/mariedelvalle/Documents/courses/data-science-course/default-prediction/data/")
train <- read.csv("datamart_morosidad_training.csv", fileEncoding="utf-8",stringsAsFactors = TRUE)
test <- read.csv("datamart_morosidad_test.csv", fileEncoding="utf-8",stringsAsFactors = TRUE)
summary(train)
# install.packages("moments")
library(moments)
sum<-
result <- summary(train)
summary(train)
